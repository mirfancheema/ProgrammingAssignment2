q()
q()
q()
install.packages("slidify")
library("rstudio", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
install.packages("devtools")
install.packages("slidify")
install.packages("dplyr")
install.packages("slidify")
pkgs <- c("slidify","slififyLibararies","rCharts")
pkgs
install_github(pkgs, 'ramnathv', ref ='dev')
install.packages("devtools")
install_github(pkgs, 'ramnathv', ref ='dev')
library(devtools)
library(RCurl)
library("RCurl")
library("rcurl")
if (!require("devtools")) install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("RCurl")
install_github(pkgs, 'ramnathv', ref ='dev')
library(devtools)
install_github(pkgs, 'ramnathv', ref ='dev')
install.packages("slidify")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures","AnnotationDbi"))
libarary(devtools)
library(devtools)
search()
biocLite(c("GenomicFeatures","AnnotationDbi"))
biocLite(c("GenomicFeatures","AnnotationDbi"))
install.packages("XML")
install.packages("KernSmooth")
library(KernSmooth)
R.version.string
install.packages("swirl")
library(swirl)
search()
swirl()
5 + 7
x <-  5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c( 0,10,100)
z * 2 + 1000
my_div
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(1,5,length=30)
seq(5,10,length=30)
my_seq=seq(5,10,length=30)
my_seq <- aeq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Muhammad Irfan")
my_name
paste(my_name, collapse= " " )
paste ("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"))
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44, NA, 5, NA)
x*3
mean(x)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample (c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x [ !is.na(x) & x > 0]
x[c(3)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c( foo =11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix2)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
q()
lapply
x <- list(a = 1:5, b=rnorm(10))
x
lapply(x, mean)
x <- list( a=1:4, b=rnorm(10), c=rnorm(20,1), d= rnorm(100,5))
lapply(x,mean)
runif(30)
x <- 1:4
lapply <- (x, runif)
lapply(x, runif)
lapply(x, runif, min =0, max=10)
x <- list(a = matrix(1:4, 2, 2), b=matrix(1:6,3,2))
x
lapply(x, function(elt)elt(,1))
lapply(x, function(elt)elt[,1])
x <- list( a=1:4, b=rnorm(10), c=rnorm(20,1), d= rnorm(100,5))
lapply(x,mean)
apply(x,mean)
sapply(x,mean)
mean(x)
str(apply)
apply
str(apply)
x <- matrix(rnorm(200),20,10)
x
x <- matrix(rnorm(200),20,10)
x
apply(x,1,mean)
apply(x,2,mean)
rowSums(x)
rowMeans(x)
x <- matrix(rnorm(200),20,10)
apply(x, 1, quantile, probs = c(0.25,0.75))
rnorm(2*2*10)
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a, c(1,2), mean)
rowMeans(a, dims = 2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean, simplify=FALSE)
tapply(x,f,range)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
split(x,f)
lapply(split(x,f))
lapply(split(x,f), mean)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
airquality$Month
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[,"OZone","Solar.R","Wind"]))
lapply(s, function(x) colMeans(x[,c("OZone","Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
s
classes(s)
class(s)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f2
f1
interaction(f1,f2)
str(split(x, list(f1, f2)))
x
str(split(x, list(f1, f2)), drop=TRUE)
str(split(x, list(f1, f2), drop=TRUE))
r(10,4)
rep(10,4)
rep(1,4)
rep(1,40)
rep(1,4000)
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd)
{rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise, 1:5,1:5,2)
library(datasets)
data(iris)
?iris
iris
split(iris, iris$Species)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean, na.rm=TRUE)
lapply(split(iris, iris$Species), function(x) mean(x,na.rm=TRUE))
lapply(split(iris, iris$Species), function(x) mean(x[,c("Sepal.Length","Sepal.Width","Petal.Width","Petal.Length")],na.rm=TRUE))
iris[,c("Sepal.Length")]
iris
lapply(split(iris, iris$Species), function(x) mean(x[,c("Sepal.Length","Sepal.Width","Petal.Width","Petal.Length")],na.rm=TRUE))
iris[,c("Sepal.Length")]
mean(iris[,c("Sepal.Length")])
lapply(split(iris, iris$Species), function(x) mean(x[,c("Sepal.Length")],na.rm=TRUE))
apply(iris[,1:4],1,mean)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
>mtcars
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean, simplify=TRUE))
with(mtcars, tapply(hp, cyl, mean, simplify=TRUE))[3]-with(mtcars, tapply(hp, cyl, mean, simplify=TRUE))[1]
debug(ls)
ls
str(ls)
debug(lm)
lm (x ~ y)
q
q()
exit
break
setwd("~/coursera/rprog/progassign2/ProgrammingAssignment2")
source("cachematric.R")
source("cachematrix.R")
m1 <- makeCacheMatrix()
m1$.set(rnorm(9),3,3)
m1$.set(matrix(rnorm(9),3,3))
rnorm(9)
m1$set(matrix(rnorm(9),3,3))
m1$get''
m1$get()
cacheSolve(m1)
cacheSolve(m1)
